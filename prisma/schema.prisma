// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int             @id              @default(autoincrement())
  firstName               String          @db.VarChar(128)
  middleName              String?         @db.VarChar(128)
  lastName                String          @db.VarChar(128)
  email                   String          @db.VarChar(128) @unique
  username                String          @db.VarChar(128) @unique
  password                String          @db.VarChar(255)
  hasTemporaryPassword    Boolean         @default(true)
  role                    UserRoles       @default(Tenant)
  leases                  Lease[]
  leasePayments           LeasePayment[]
  reservations            Reservation[]
  reservationPayments     ReservationPayment[]
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  deletedAt               DateTime?
}

model PropertyType {
  id                 Int                @id              @default(autoincrement())
  name               String             @db.VarChar(128) @unique
  display            String             @db.VarChar(128)
  description        String?            @db.Text
  properties         Property[]
}

model PropertyLocationPhase {
  id                 Int                @id              @default(autoincrement())
  name               String             @db.VarChar(128) @unique
  display            String             @db.VarChar(128)
  description        String?            @db.Text
  properties         Property[]
}

model PropertyLocationBlock {
  id                 Int                @id              @default(autoincrement())
  name               String             @db.VarChar(128) @unique
  display            String             @db.VarChar(128)
  description        String?            @db.Text
  properties         Property[]
}

model Property {
  id                          Int                      @id              @default(autoincrement())
  propertyTypeId              Int
  propertyLocationPhaseId     Int
  propertyLocationBlockId     Int
  propertyType                PropertyType             @relation(fields: [propertyTypeId], references: [id], onDelete: Cascade)
  propertyLocationPhase       PropertyLocationPhase    @relation(fields: [propertyLocationPhaseId], references: [id], onDelete: Cascade)
  propertyLocationBlock       PropertyLocationBlock    @relation(fields: [propertyLocationBlockId], references: [id], onDelete: Cascade)
  leasese                     Lease[]
  name                        String                   @db.VarChar(255)
  amount                      String                   @db.VarChar(255)
  code                        String                   @db.VarChar(255) @unique
  location                    String                   @db.VarChar(255)
  description                 String?                  @db.Text
  bathrooms                   Int                      @default(0)
  bedrooms                    Int                      @default(0)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  deletedAt               DateTime?
}

model Utility {
  id                 Int                @id              @default(autoincrement())
  name               String             @db.VarChar(128) @unique
  display            String             @db.VarChar(128)
  description        String?            @db.Text
  leaseUtilityCharges LeaseUtilityCharge[]
}

model Extra {
  id                 Int                @id              @default(autoincrement())
  name               String             @db.VarChar(128) @unique
  display            String             @db.VarChar(128)
  description        String?            @db.Text
  leaseExtraCharges  LeaseExtraCharge[]
}

model Facility {
  id                        Int                @id              @default(autoincrement())
  name                      String             @db.VarChar(128)
  description               String?            @db.Text
  facilityPaymentSetting    FacilityPaymentSetting?
  facilityImages            FacilityImage[]
  reservations              Reservation[]
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt
  deletedAt                 DateTime?
}


model FacilityPaymentSetting {
  id            Int                    @id @default(autoincrement())
  facility      Facility               @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  type          FacilityPaymentTypes
  amount        String?
  facilityId    Int                    @unique
  downPayment   String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
}

model FacilityImage {
  id            Int                    @id @default(autoincrement())
  facility      Facility               @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  url           String                 @db.VarChar(255)
  facilityId    Int
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
}

model Lease {
  id                    Int                    @id @default(autoincrement())
  property              Property               @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  tenant                User                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  leaseUtilityCharges   LeaseUtilityCharge[]
  leaseExtraCharges     LeaseExtraCharge[]
  leasePayments         LeasePayment[]
  propertyId            Int
  tenantId              Int
  rentalAmount          String?
  totalAmount           String
  date                  String
  type                  LeaseTypes             @default(Rental)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
}

model LeaseUtilityCharge {
  id            Int                    @id @default(autoincrement())
  lease         Lease                  @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  utility       Utility                @relation(fields: [utilityId], references: [id], onDelete: Cascade)
  leaseId       Int
  utilityId     Int
  amount        String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
}

model LeaseExtraCharge {
  id            Int                    @id @default(autoincrement())
  lease         Lease                  @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  extra         Extra                  @relation(fields: [extraId], references: [id], onDelete: Cascade)
  leaseId       Int
  extraId       Int
  amount        String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
}

model LeasePayment {
  id                    Int                    @id @default(autoincrement())
  lease                 Lease                  @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  leaseId               Int
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int
  status                LeasePaymentStatuses   @default(Pending)
  amount                String
  leasePaymentImages    LeasePaymentImage[]
  reason                String?
  otherReason           String?
  otherReasonDetails    String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
}

model LeasePaymentImage {
  id                Int                    @id @default(autoincrement())
  leasePayment      LeasePayment           @relation(fields: [leasePaymentId], references: [id], onDelete: Cascade)
  leasePaymentId    Int
  url               String                 @db.Text
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  deletedAt         DateTime?
}

model Reservation {
  id                    Int                    @id @default(autoincrement())
  facility              Facility               @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  tenant                User                   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  facilityId            Int
  tenantId              Int
  totalAmount           String
  startDate             String
  endDate               String
  reservationPayments    ReservationPayment[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  deletedAt             DateTime?
}

model ReservationPayment {
  id                      Int                    @id @default(autoincrement())
  reservation             Reservation            @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId           Int
  user                    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  Int
  status                  LeasePaymentStatuses   @default(Pending)
  amount                  String
  reason                  String?
  otherReason             String?
  otherReasonDetails      String?
  reservationPaymentImages ReservationPaymentImage[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  deletedAt               DateTime?
}

model ReservationPaymentImage {
  id                      Int                    @id @default(autoincrement())
  reservationPayment      ReservationPayment     @relation(fields: [reservationPaymentId], references: [id], onDelete: Cascade)
  reservationPaymentId    Int
  url                     String                 @db.Text
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  deletedAt               DateTime?
}


model Announcement {
  id            Int                @id @default(autoincrement())
  title         String             @db.VarChar(128)
  description   String?            @db.Text
  location      String?            @db.VarChar(255)
  startDate     String?            @db.VarChar(255)
  endDate       String?            @db.VarChar(255)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
}

model Poll {
  id            Int                @id @default(autoincrement())
  title         String             @db.VarChar(128)
  description   String?            @db.Text
  endDate       String?            @db.VarChar(255)
  allowedAnswer Int               @db.Int @default(1)
  pollChoices   PollChoice[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
}

model PollChoice {
  id                  Int           @id @default(autoincrement())
  poll                Poll          @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId              Int
  option              String        @db.VarChar(255)
}

enum UserRoles {
  Admin
  Staff
  Tenant
}

enum FacilityPaymentTypes {
  PerHour
  WholeDay
}

enum LeaseTypes {
  Rental
  Homeowner
}

enum LeasePaymentStatuses {
  Approved
  Rejected
  Pending
}
